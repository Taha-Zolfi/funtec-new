async function handleResponse(response) {
  if (!response.ok) {
    const error = await response.json().catch(() => ({ 
      message: response.statusText,
      details: 'Failed to parse error response'
    }));
    
    const errorMessage = error.details 
      ? `${error.message}\nDetails: ${error.details}`
      : error.message || 'Unknown error';
      
    throw new Error(`API Error: ${response.status} - ${errorMessage}`);
  }
  return response.json();
}

const api = {
  // --- Product Operations ---
  getProducts() {
    return fetch('/api/products')
      .then(handleResponse)
      .catch(error => {
        console.error('Error fetching products:', error);
        throw error;
      });
  },

  getProduct(id) {
    return fetch(`/api/products?id=${id}`)
      .then(handleResponse)
      .catch(error => {
        console.error('Error fetching product:', error);
        throw error;
      });
  },

  createProduct(productData) {
    return fetch('/api/products', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(productData),
    }).then(handleResponse);
  },

  updateProduct(id, productData) {
    return fetch(`/api/products?id=${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(productData),
    })
    .then(handleResponse)
    .catch(error => {
      console.error('Error updating product:', error);
      throw error;
    });
  },

  deleteProduct(id) {
    return fetch(`/api/products?id=${id}`, {
      method: 'DELETE',
    }).then(handleResponse);
  },

  addReview(productId, reviewData) {
    return fetch(`/api/products?id=${productId}&action=add_review`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ review: reviewData }),
    }).then(handleResponse);
  },

  // --- Service Operations ---
  getServices() {
    return fetch('/api/services')
      .then(handleResponse)
      .catch(error => {
        console.error('Error fetching services:', error);
        throw error;
      });
  },

  getService(id) {
    return fetch(`/api/services?id=${id}`)
      .then(handleResponse)
      .catch(error => {
        console.error('Error fetching service:', error);
        throw error;
      });
  },

  createService(serviceData) {
    return fetch('/api/services', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(serviceData),
    }).then(handleResponse);
  },

  updateService(id, serviceData) {
    return fetch(`/api/services?id=${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(serviceData),
    }).then(handleResponse);
  },

  deleteService(id) {
    return fetch(`/api/services?id=${id}`, {
      method: 'DELETE'
    }).then(handleResponse);
  },

  // --- Comment Operations ---
  addComment(productId, commentData) {
    return fetch('/api/comments', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        productId,
        name: commentData.reviewer_name,
        text: commentData.comment,
        rating: commentData.rating
      }),
    }).then(handleResponse);
  },

  // --- News Operations ---
  getNews() {
    return fetch('/api/news')
      .then(handleResponse)
      .catch(error => {
        console.error('Error fetching news:', error);
        throw error;
      });
  },

  getNewsItem(id) {
    return fetch(`/api/news?id=${id}`)
      .then(handleResponse)
      .catch(error => {
        console.error('Error fetching news item:', error);
        throw error;
      });
  },

  createNews(newsData) {
    return fetch('/api/news', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(newsData),
    }).then(handleResponse);
  },

  updateNews(id, newsData) {
    return fetch(`/api/news?id=${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(newsData),
    }).then(handleResponse);
  },

  deleteNews(id) {
    return fetch(`/api/news?id=${id}`, {
      method: 'DELETE',
    }).then(handleResponse);
  },

  // --- File Upload ---
  async uploadFile(file) {
    const formData = new FormData();
    formData.append('file', file);
    
    const response = await fetch('/api/upload', {
      method: 'POST',
      body: formData,
    });
    
    return handleResponse(response);
  }
};

export { api };
