:root {
  --primary-gold: #ffb527;
  --primary-blue: #13c8ff;
  --text-light: #f0f0f0;
  --bg-dark: rgba(0, 0, 0, 0.95);
  --bg-darker: rgba(10, 10, 20, 1);
  --border-radius: 25px;
  --transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

.home {
  position: relative;
  min-height: 100vh;
  width: 100%;
  overflow: hidden;
  direction: rtl;
  background: var(--bg-darker);
}

.background-scene {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: -1;
  overflow: hidden;
  pointer-events: none;
  /*
    The 'contain' property helps browsers optimize rendering by isolating this element.
    'layout', 'style', and 'paint' tell the browser that this element's internals
    won't affect the rest of the page's layout or style.
  */
  contain: layout style paint;
}

/* Spline background: full-viewport, behind all UI, non-interactive */
.spline-background {
  position: fixed;
  inset: 0;
  width: 100vw;
  height: 100vh;
  z-index: 0; /* sit behind content but above page background */
  overflow: hidden;
  pointer-events: none; /* allow clicks to pass to UI */
  background: transparent;
}

.spline-container {
  position: absolute;
  inset: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

/* mobile background video (used instead of Spline) */
.mobile-video-bg {
  position: absolute;
  inset: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  z-index: 0;
  pointer-events: none;
  filter: saturate(0.95) contrast(1.02);
}

.spline-container spline-viewer,
.spline-container > spline-viewer {
  width: 100% !important;
  height: 100% !important;
  display: block;
  pointer-events: none !important;
}

.loading {
  position: absolute;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--text-light);
  background: transparent;
  pointer-events: none;
  z-index: -1;
}

.loading-background {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: var(--bg-darker);
  z-index: -1;
}

.loading-placeholder {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--bg-darker);
}

.background-gradient {
  position: fixed;
  bottom: 0;
  right: 0;
  background: linear-gradient(to right, transparent, var(--bg-darker) 50%);
  padding: 20px;
  width: 400px;
  height: 80px;
  z-index: 1000;
  pointer-events: none;
}

.content-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 100vh;
  gap: 40px;
  position: relative;
  z-index: 100; /* raise UI above spline and canvas */
  padding: 0 40px 0 0;
  color: var(--text-light);
  transition: var(--transition);
}

.ferris-wheel-container {
  flex: 1;
  height: 100vh;
  width: 50%;
  position: fixed; /* place it fixed so it can sit left of the content */
  left: 0;
  top: 0;
  /*
    Promotes the element to its own layer for hardware acceleration.
    This is a highly performant way to handle complex visual elements.
  */
  transform: translateZ(0);
  margin: 0;
  padding: 0;
  /*
    Changed from 'strict' to be safer. This still provides significant
    performance gains by isolating the component without being overly
    restrictive about its size, which can prevent layout issues.
  */
  contain: layout style paint;
  z-index: 0; /* keep the 3D canvas behind the main content */
}

.ferris-wheel-container canvas {
  width: 100% !important;
  height: 100% !important;
  display: block;
  /* These properties help optimize rendering for 3D content */
  backface-visibility: hidden;
  perspective: 1000px;
  transform: translate3d(0,0,0);
  z-index: -1;
}

/* Shift content to the right so ferris wheel appears on the left side */
@media (min-width: 769px) {
  .content-container {
    margin-left: 50%;
  }
}

/* On smaller viewports ferris-wheel is hidden â€” remove the left shift */
@media (max-width: 768px) {
  .content-container {
    margin-left: 0;
  }
  .ferris-wheel-container {
    display: none !important;
    position: relative;
  }
}

.main {
  flex: 1;
  text-align: right;
  padding-right: 40px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  max-width: 100%; /* allow title to use full available width on the content side */
}

.h-title {
  font-size: clamp(5.5rem, 9vw, 12rem);
  font-weight: 900;
  position: relative; /* Needed for the pseudo-element positioning */
  color: transparent; /* Hide the original text color */
  background: linear-gradient(135deg, var(--primary-gold), var(--primary-blue), var(--primary-gold));
  background-size: 200% 200%;
  -webkit-background-clip: text;
  background-clip: text;
  /*
    Removed 'will-change' here. Modern browsers are good at layer promotion
    for animations, and removing it can save GPU memory.
  */
}

/*
  PERFORMANCE OPTIMIZATION:
  Instead of animating the `background-position` of the text itself (which is costly),
  we create a pseudo-element with the animated gradient and clip it to the text shape.
  This is much more performant.
*/
.h-title::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, var(--primary-gold), var(--primary-blue), var(--primary-gold));
  background-size: 200% 200%;
  animation: gradientShift 16s ease-in-out infinite;
  -webkit-background-clip: text;
  background-clip: text;
}


/* Desktop: keep title and subtitle on a single line */
@media (min-width: 769px) {
  .h-title,
  .subtitle {
    white-space: nowrap;
    overflow-wrap: normal;
  }
  /* a slightly tighter scaling on large screens avoids accidental wrapping */
  .h-title { font-size: clamp(4.5rem, 6vw, 12rem); }
}

@keyframes gradientShift {
  0%, 100% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
}

.subtitle {
  font-size: clamp(1.6rem, 2.8vw, 3.2rem);
  font-weight: 600;
  margin: 1.5rem 0;
  color: var(--text-light);
}

.home-buttons {
  margin-top: 0.5rem;
  display: flex;
  gap: 40px;
}

.home-btn {
  padding: 16px 40px;
  font-size: clamp(1.1rem, 1.8vw, 1.6rem);
  font-weight: 700;
  border-radius: 18px;
  cursor: pointer;
  transition: all 0.3s ease;
  background: transparent;
  position: relative;
  overflow: hidden;
  background-color: rgba(0, 0, 0, 0.63);
  border: 2px solid;
}

.gallery {
  border-color: var(--primary-gold);
  color: var(--primary-gold);
}

.gallery:hover {
  background: rgba(255, 181, 39, 0.1);
  transform: translateY(-2px);
}

.gallery:active {
  transform: translateY(0);
}

.contact {
  border-color: var(--primary-blue);
  color: var(--primary-blue);
}

.contact:hover {
  background: rgba(19, 200, 255, 0.1);
  transform: translateY(-2px);
}

.contact:active {
  transform: translateY(0);
}

.scroll-indicator {
  display: none;
  position: fixed;
  bottom: 30px;
  left: 50%;
  transform: translateX(-50%);
  z-index: 100;
}

.scroll-arrow {
  width: 0;
  height: 0;
  border-left: 8px solid transparent;
  border-right: 8px solid transparent;
  border-top: 12px solid rgba(255, 181, 39, 0.8);
  animation: scrollBounce 2s ease-in-out infinite;
}

@keyframes scrollBounce {
  0%, 100% { transform: translateY(0); opacity: 0.6; }
  50% { transform: translateY(5px); opacity: 1; }
}

@media (max-width: 1024px) {
  .content-container {
    flex-direction: column;
    padding: 30px 20px;
    gap: 40px;
  }
  .main {
    max-width: 100%;
    text-align: center;
    padding-right: 0;
    margin-top: -5rem;
  }
  .ferris-wheel-container {
    width: 100%;
    height: 60vh;
  }
}

@media (max-width: 768px) {
  .ferris-wheel-container { display: none !important; }
  .content-container {
    flex-direction: column;
    align-items: center;
    padding: 60px 20px 80px 20px;
  }
  .main {
    text-align: center;
    padding: 0;
    max-width: 100%;
    margin-top: -5rem;
  }
  /* mobile: allow wrapping and use smaller sizes so title doesn't overflow */
  .h-title {
    white-space: normal;
    word-break: keep-all; /* Persian: prefer not breaking words between letters */
  }
  .subtitle {
    white-space: normal;
    font-size: clamp(1.3rem, 4.5vw, 2.2rem);
  }
  .home-buttons {
    flex-direction: column;
    gap: 20px;
    align-items: center;
  }
  .home-btn {
    width: 100%;
    max-width: 350px;
  }
  .scroll-indicator { display: block; }
}

/* Hide Spline attribution/credits injected by the viewer */
.spline-container a[href*="spline"],
.spline-container .spline-credit,
.spline-container .spline-credits,
.spline-container .credit,
spline-viewer .spline-credit,
spline-viewer::part(footer),
.spline-container ._webglFooter,
.spline-container .powered-by {
  display: none !important;
  pointer-events: none !important;
  opacity: 0 !important;
}
