import { NextResponse } from 'next/server';
import { getDb } from '@/lib/db';

async function handleError(error, context = '') {
  console.error(`Error in ${context}:`, error);
  console.error('Stack trace:', error.stack);
  
  let errorMessage = 'Unknown error';
  if (error.message) errorMessage = error.message;
  if (error.code) errorMessage = `${errorMessage} (Code: ${error.code})`;
  
  return NextResponse.json(
    { error: errorMessage }, 
    { status: 500 }
  );
}

export async function GET(request) {
  let db;
  try {
    db = await getDb();
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    if (id) {
      // Get single product
      const product = await db.get('SELECT * FROM products WHERE id = ?', id);
      if (!product) {
        return NextResponse.json({ error: 'Product not found' }, { status: 404 });
      }
      
      // Parse arrays from string
      const { price, ...productWithoutPrice } = product;
      return NextResponse.json({
        ...productWithoutPrice,
        features: product.features ? product.features.split(',').filter(Boolean) : [],
        images: product.images ? product.images.split(',').filter(Boolean) : [],
        specifications: product.specifications ? product.specifications.split(',').filter(Boolean) : [],
        background_video: product.background_video || null
      });
    } else {
      // Get all products
      const products = await db.all('SELECT * FROM products');
      const processedProducts = products.map(product => {
        const { price, ...productWithoutPrice } = product;
        return {
          ...productWithoutPrice,
          features: product.features ? product.features.split(',').filter(Boolean) : [],
          images: product.images ? product.images.split(',').filter(Boolean) : [],
          specifications: product.specifications ? product.specifications.split(',').filter(Boolean) : [],
          background_video: product.background_video || null
        };
      });
      return NextResponse.json(processedProducts);
    }
  } catch (error) {
    return handleError(error, 'GET products');
  }
}

export async function POST(request) {
  let db;
  try {
    db = await getDb();
    const data = await request.json();
    const { features, images, specifications, ...rest } = data;

    const result = await db.run(
      'INSERT INTO products (name, description, background_video, features, images, specifications) VALUES (?, ?, ?, ?, ?, ?)',
      [
        rest.name,
        rest.description,
        rest.background_video || null,
        Array.isArray(features) ? features.filter(Boolean).join(',') : '',
        Array.isArray(images) ? images.filter(Boolean).join(',') : '',
        Array.isArray(specifications) ? specifications.filter(Boolean).join(',') : ''
      ]
    );

    // Fetch the newly created product
    const newProduct = await db.get('SELECT * FROM products WHERE id = ?', result.lastID);
    return NextResponse.json({ 
      success: true, 
      id: result.lastID,
      product: {
        ...newProduct,
        features: newProduct.features ? newProduct.features.split(',').filter(Boolean) : [],
        images: newProduct.images ? newProduct.images.split(',').filter(Boolean) : [],
        specifications: newProduct.specifications ? newProduct.specifications.split(',').filter(Boolean) : [],
        background_video: newProduct.background_video || null
      }
    }, { status: 201 });
  } catch (error) {
    return handleError(error, 'POST product');
  }
}

export async function PUT(request) {
  let db;
  try {
    db = await getDb();
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json({ error: 'Product ID is required' }, { status: 400 });
    }

    // Handle reviews
    if (searchParams.get('action') === 'add_review') {
      const { review } = await request.json();
      const result = await db.run(
        'INSERT INTO product_reviews (product_id, rating, comment) VALUES (?, ?, ?)',
        [id, review.rating, review.comment]
      );
      return NextResponse.json({ id: result.lastID });
    }

    // Regular product update
    const data = await request.json();
    console.log("Received update data:", JSON.stringify(data, null, 2));
    console.log("Product ID:", id);

    // Check if the product exists
    const existingProduct = await db.get('SELECT * FROM products WHERE id = ?', id);
    if (!existingProduct) {
      return NextResponse.json({ error: 'Product not found' }, { status: 404 });
    }

    const { features, images, specifications, ...rest } = data;
    
    const params = [
      rest.name,
      rest.description,
      rest.background_video || null,
      Array.isArray(features) ? features.filter(Boolean).join(',') : '',
      Array.isArray(images) ? images.filter(Boolean).join(',') : '',
      Array.isArray(specifications) ? specifications.filter(Boolean).join(',') : '',
      id
    ];

    console.log('Running SQL update with params:', params);

    await db.run(
      'UPDATE products SET name = ?, description = ?, background_video = ?, features = ?, images = ?, specifications = ? WHERE id = ?',
      params
    );

    // Fetch and return the updated product
    const updatedProduct = await db.get('SELECT * FROM products WHERE id = ?', id);
    return NextResponse.json({ 
      success: true, 
      product: {
        ...updatedProduct,
        features: updatedProduct.features ? updatedProduct.features.split(',').filter(Boolean) : [],
        images: updatedProduct.images ? updatedProduct.images.split(',').filter(Boolean) : [],
        specifications: updatedProduct.specifications ? updatedProduct.specifications.split(',').filter(Boolean) : [],
        background_video: updatedProduct.background_video || null
      }
    });
  } catch (error) {
    return handleError(error, 'PUT product');
  }
}

export async function DELETE(request) {
  let db;
  try {
    db = await getDb();
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json({ error: 'Product ID is required' }, { status: 400 });
    }

    await db.run('DELETE FROM products WHERE id = ?', id);
    return NextResponse.json({ success: true });
  } catch (error) {
    return handleError(error, 'DELETE product');
  }
}
